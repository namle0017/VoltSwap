// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using VoltSwap.DAL.Models;

namespace VoltSwap.DAL.Data;

public partial class VoltSwapDbContext : DbContext
{
    public VoltSwapDbContext()
    {
    }

    public VoltSwapDbContext(DbContextOptions<VoltSwapDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Appointment> Appointments { get; set; }

    public virtual DbSet<Battery> Batteries { get; set; }

    public virtual DbSet<BatterySession> BatterySessions { get; set; }

    public virtual DbSet<BatterySwap> BatterySwaps { get; set; }

    public virtual DbSet<BatterySwapPillar> BatterySwapPillars { get; set; }

    public virtual DbSet<BatterySwapStation> BatterySwapStations { get; set; }

    public virtual DbSet<DriverVehicle> DriverVehicles { get; set; }

    public virtual DbSet<Fee> Fees { get; set; }

    public virtual DbSet<PillarSlot> PillarSlots { get; set; }

    public virtual DbSet<Plan> Plans { get; set; }

    public virtual DbSet<Rating> Ratings { get; set; }

    public virtual DbSet<Report> Reports { get; set; }

    public virtual DbSet<StationStaff> StationStaffs { get; set; }

    public virtual DbSet<Subscription> Subscriptions { get; set; }

    public virtual DbSet<Transaction> Transactions { get; set; }

    public virtual DbSet<TransferLog> TransferLogs { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Appointment>(entity =>
        {
            entity.HasKey(e => e.AppointmentId).HasName("PK__appointm__A50828FC5015D3FE");

            entity.ToTable("appointments");

            entity.HasIndex(e => e.BatterySwapStationId, "IX_appointments_battery_swap_station_id");

            entity.HasIndex(e => new { e.DateBooking, e.TimeBooking }, "IX_appointments_booking_date_time");

            entity.HasIndex(e => e.SubscriptionId, "IX_appointments_subscription_id");

            entity.HasIndex(e => e.UserDriverId, "IX_appointments_user_driver_id");

            entity.Property(e => e.AppointmentId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("appointment_id");
            entity.Property(e => e.BatterySwapStationId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("battery_swap_station_id");
            entity.Property(e => e.CreateBookingAt)
                .HasColumnType("datetime")
                .HasColumnName("create_booking_at");
            entity.Property(e => e.DateBooking).HasColumnName("date_booking");
            entity.Property(e => e.Note)
                .HasColumnType("text")
                .HasColumnName("note");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubscriptionId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("subscription_id");
            entity.Property(e => e.TimeBooking).HasColumnName("time_booking");
            entity.Property(e => e.UserDriverId)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("user_driver_id");

            entity.HasOne(d => d.BatterySwapStation).WithMany(p => p.Appointments)
                .HasForeignKey(d => d.BatterySwapStationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_appointments_battery_swap_station_id");

            entity.HasOne(d => d.Subscription).WithMany(p => p.Appointments)
                .HasForeignKey(d => d.SubscriptionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_appointments_subscription_id");

            entity.HasOne(d => d.UserDriver).WithMany(p => p.Appointments)
                .HasForeignKey(d => d.UserDriverId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_appointments_user_driver_id");
        });

        modelBuilder.Entity<Battery>(entity =>
        {
            entity.HasKey(e => e.BatteryId).HasName("PK__batterie__31C8DB8E09E21FA5");

            entity.ToTable("batteries");

            entity.HasIndex(e => e.BatterySwapStationId, "IX_batteries_battery_swap_station_id");

            entity.HasIndex(e => e.Status, "IX_batteries_status");

            entity.Property(e => e.BatteryId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("battery_id");
            entity.Property(e => e.BatterySwapStationId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("battery_swap_station_id");
            entity.Property(e => e.Capacity)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("capacity");
            entity.Property(e => e.Soc)
                .HasColumnType("decimal(6, 3)")
                .HasColumnName("soc");
            entity.Property(e => e.Soh)
                .HasColumnType("decimal(6, 3)")
                .HasColumnName("soh");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("status");

            entity.HasOne(d => d.BatterySwapStation).WithMany(p => p.Batteries)
                .HasForeignKey(d => d.BatterySwapStationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_batteries_battery_swap_station_id");
        });

        modelBuilder.Entity<BatterySession>(entity =>
        {
            entity.HasKey(e => e.SessionId).HasName("PK__battery___69B13FDCEDB09BC2");

            entity.ToTable("battery_sessions");

            entity.HasIndex(e => e.BatteryId, "IX_battery_sessions_battery_id");

            entity.HasIndex(e => new { e.TimestampOut, e.TimestampIn }, "IX_battery_sessions_timestamps");

            entity.Property(e => e.SessionId).HasColumnName("session_id");
            entity.Property(e => e.BatteryId)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("battery_id");
            entity.Property(e => e.CycleEnd)
                .HasColumnType("decimal(6, 3)")
                .HasColumnName("cycle_end");
            entity.Property(e => e.CycleStart)
                .HasColumnType("decimal(6, 3)")
                .HasColumnName("cycle_start");
            entity.Property(e => e.EnergyChargedWh)
                .HasColumnType("decimal(12, 3)")
                .HasColumnName("energy_charged_wh");
            entity.Property(e => e.EnergyDischargedWh)
                .HasColumnType("decimal(12, 3)")
                .HasColumnName("energy_discharged_wh");
            entity.Property(e => e.SocEnd)
                .HasColumnType("decimal(6, 3)")
                .HasColumnName("soc_end");
            entity.Property(e => e.SocStart)
                .HasColumnType("decimal(6, 3)")
                .HasColumnName("soc_start");
            entity.Property(e => e.TimestampIn)
                .HasColumnType("datetime")
                .HasColumnName("timestamp_in");
            entity.Property(e => e.TimestampOut)
                .HasColumnType("datetime")
                .HasColumnName("timestamp_out");

            entity.HasOne(d => d.Battery).WithMany(p => p.BatterySessions)
                .HasForeignKey(d => d.BatteryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_battery_session_battery_id");
        });

        modelBuilder.Entity<BatterySwap>(entity =>
        {
            entity.HasKey(e => e.SwapHistoryId).HasName("PK__battery___74DF5EE30D061AE7");

            entity.ToTable("battery_swap");

            entity.HasIndex(e => e.BatteryInId, "IX_battery_swap_battery_in_id");

            entity.HasIndex(e => e.BatteryOutId, "IX_battery_swap_battery_out_id");

            entity.HasIndex(e => e.BatterySwapStationId, "IX_battery_swap_battery_swap_station_id");

            entity.HasIndex(e => e.SubscriptionId, "IX_battery_swap_subscription_id");

            entity.HasIndex(e => e.SwapDate, "IX_battery_swap_swap_date");

            entity.Property(e => e.SwapHistoryId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("swap_history_id");
            entity.Property(e => e.BatteryInId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("battery_in_id");
            entity.Property(e => e.BatteryOutId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("battery_out_id");
            entity.Property(e => e.BatterySwapStationId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("battery_swap_station_id");
            entity.Property(e => e.CreateAt)
                .HasColumnType("datetime")
                .HasColumnName("create_at");
            entity.Property(e => e.Note)
                .HasColumnType("text")
                .HasColumnName("note");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubscriptionId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("subscription_id");
            entity.Property(e => e.SwapDate).HasColumnName("swap_date");

            entity.HasOne(d => d.BatteryIn).WithMany(p => p.BatterySwapBatteryIns)
                .HasForeignKey(d => d.BatteryInId)
                .HasConstraintName("FK_battery_swap_battery_in_id");

            entity.HasOne(d => d.BatteryOut).WithMany(p => p.BatterySwapBatteryOuts)
                .HasForeignKey(d => d.BatteryOutId)
                .HasConstraintName("FK_battery_swap_battery_out_id");

            entity.HasOne(d => d.BatterySwapStation).WithMany(p => p.BatterySwaps)
                .HasForeignKey(d => d.BatterySwapStationId)
                .HasConstraintName("FK_battery_swap_battery_swap_station_id");

            entity.HasOne(d => d.Subscription).WithMany(p => p.BatterySwaps)
                .HasForeignKey(d => d.SubscriptionId)
                .HasConstraintName("FK_battery_swap_subscription_id");
        });

        modelBuilder.Entity<BatterySwapPillar>(entity =>
        {
            entity.HasKey(e => e.BatterySwapPillarId).HasName("PK__battery___02EC35A0DC436FDD");

            entity.ToTable("battery_swap_pillar");

            entity.HasIndex(e => e.BatterySwapStationId, "IX_battery_swap_pillar_battery_swap_station_id");

            entity.Property(e => e.BatterySwapPillarId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("battery_swap_pillar_id");
            entity.Property(e => e.BatterySwapStationId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("battery_swap_station_id");
            entity.Property(e => e.PillarCapacity).HasColumnName("pillar_capacity");

            entity.HasOne(d => d.BatterySwapStation).WithMany(p => p.BatterySwapPillars)
                .HasForeignKey(d => d.BatterySwapStationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_battery_swap_pillar_battery_swap_station_id");
        });

        modelBuilder.Entity<BatterySwapStation>(entity =>
        {
            entity.HasKey(e => e.BatterySwapStationId).HasName("PK__battery___25B1A58CE62743B8");

            entity.ToTable("battery_swap_stations");

            entity.HasIndex(e => new { e.LocationLat, e.LocationLng }, "IX_battery_swap_stations_location");

            entity.HasIndex(e => e.Status, "IX_battery_swap_stations_status");

            entity.Property(e => e.BatterySwapStationId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("battery_swap_station_id");
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("address");
            entity.Property(e => e.BatterySwapStationName)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("battery_swap_station_name");
            entity.Property(e => e.CloseTime).HasColumnName("close_time");
            entity.Property(e => e.LocationLat)
                .HasColumnType("decimal(9, 6)")
                .HasColumnName("location_lat");
            entity.Property(e => e.LocationLng)
                .HasColumnType("decimal(9, 6)")
                .HasColumnName("location_lng");
            entity.Property(e => e.NumberOfPillar).HasColumnName("number_of_pillar");
            entity.Property(e => e.OpenTime).HasColumnName("open_time");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("status");
        });

        modelBuilder.Entity<DriverVehicle>(entity =>
        {
            entity.HasKey(e => e.Vin).HasName("PK__driver_v__DDB00C67D69D6AE0");

            entity.ToTable("driver_vehicles");

            entity.HasIndex(e => e.UserDriverId, "IX_driver_vehicles_user_driver_id");

            entity.Property(e => e.Vin)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("vin");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.NumberOfBattery).HasColumnName("number_of_battery");
            entity.Property(e => e.UserDriverId)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("user_driver_id");
            entity.Property(e => e.VehicleModel)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("vehicle_model");

            entity.HasOne(d => d.UserDriver).WithMany(p => p.DriverVehicles)
                .HasForeignKey(d => d.UserDriverId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_driver_vehicles_user_driver_id");
        });

        modelBuilder.Entity<Fee>(entity =>
        {
            entity.HasKey(e => e.FeeId).HasName("PK__fees__A19C8AFBB6238D72");

            entity.ToTable("fees");

            entity.HasIndex(e => e.EffectiveDate, "IX_fees_effective_date");

            entity.HasIndex(e => e.PlanId, "IX_fees_plan_id");

            entity.HasIndex(e => e.UserAdminId, "IX_fees_user_admin_id");

            entity.Property(e => e.FeeId).HasColumnName("fee_id");
            entity.Property(e => e.Amount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("amount");
            entity.Property(e => e.CalculationMethod)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("calculation_method");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.EffectiveDate).HasColumnName("effective_date");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.MaxValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("max_value");
            entity.Property(e => e.MinValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("min_value");
            entity.Property(e => e.PlanId)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("plan_id");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.TypeOfFee)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("type_of_fee");
            entity.Property(e => e.Unit)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("unit");
            entity.Property(e => e.UserAdminId)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("user_admin_id");

            entity.HasOne(d => d.Plan).WithMany(p => p.Fees)
                .HasForeignKey(d => d.PlanId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_fees_plan_id");

            entity.HasOne(d => d.UserAdmin).WithMany(p => p.Fees)
                .HasForeignKey(d => d.UserAdminId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_fees_user_admin_id");
        });

        modelBuilder.Entity<PillarSlot>(entity =>
        {
            entity.HasKey(e => e.SlotId).HasName("PK__pillar_s__971A01BBCBCB7F3A");

            entity.ToTable("pillar_slots");

            entity.HasIndex(e => e.BatteryId, "IX_pillar_slots_battery_id");

            entity.HasIndex(e => e.BatterySwapPillarId, "IX_pillar_slots_battery_swap_pillar_id");

            entity.HasIndex(e => e.SlotNumber, "IX_pillar_slots_slot_number");

            entity.Property(e => e.SlotId).HasColumnName("slot_id");
            entity.Property(e => e.BatteryId)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("battery_id");
            entity.Property(e => e.BatterySwapPillarId)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("battery_swap_pillar_id");
            entity.Property(e => e.SlotNumber).HasColumnName("slot_number");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.UpdateAt)
                .HasColumnType("datetime")
                .HasColumnName("update_at");

            entity.HasOne(d => d.Battery).WithMany(p => p.PillarSlots)
                .HasForeignKey(d => d.BatteryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pillar_slots_battery_id");

            entity.HasOne(d => d.BatterySwapPillar).WithMany(p => p.PillarSlots)
                .HasForeignKey(d => d.BatterySwapPillarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pillar_slots_battery_swap_pillar_id");
        });

        modelBuilder.Entity<Plan>(entity =>
        {
            entity.HasKey(e => e.PlanId).HasName("PK__plans__BE9F8F1D1AE596C2");

            entity.ToTable("plans");

            entity.HasIndex(e => e.UserAdminId, "IX_plans_user_admin_id");

            entity.Property(e => e.PlanId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("plan_id");
            entity.Property(e => e.CreateAt)
                .HasColumnType("datetime")
                .HasColumnName("create_at");
            entity.Property(e => e.DurationDays).HasColumnName("duration_days");
            entity.Property(e => e.MileageBaseUsed)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("mileage_base_used");
            entity.Property(e => e.NumberOfBattery).HasColumnName("number_of_battery");
            entity.Property(e => e.PlanName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("plan_name");
            entity.Property(e => e.Price).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.SwapLimit).HasColumnName("swap_limit");
            entity.Property(e => e.UserAdminId)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("user_admin_id");

            entity.HasOne(d => d.UserAdmin).WithMany(p => p.Plans)
                .HasForeignKey(d => d.UserAdminId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_plans_user_admin_id");
        });

        modelBuilder.Entity<Rating>(entity =>
        {
            entity.HasKey(e => e.RatingId).HasName("PK__ratings__D35B278B815402B8");

            entity.ToTable("ratings");

            entity.HasIndex(e => e.BatterySwapStationId, "IX_ratings_battery_swap_station_id");

            entity.HasIndex(e => e.RatingScore, "IX_ratings_rating_score");

            entity.HasIndex(e => e.UserDriverId, "IX_ratings_user_driver_id");

            entity.Property(e => e.RatingId).HasColumnName("rating_id");
            entity.Property(e => e.BatterySwapStationId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("battery_swap_station_id");
            entity.Property(e => e.Comment)
                .HasColumnType("text")
                .HasColumnName("comment");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.RatingScore).HasColumnName("rating_score");
            entity.Property(e => e.UserDriverId)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("user_driver_id");

            entity.HasOne(d => d.BatterySwapStation).WithMany(p => p.Ratings)
                .HasForeignKey(d => d.BatterySwapStationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ratings_battery_swap_station_id");

            entity.HasOne(d => d.UserDriver).WithMany(p => p.Ratings)
                .HasForeignKey(d => d.UserDriverId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ratings_user_driver_id");
        });

        modelBuilder.Entity<Report>(entity =>
        {
            entity.HasKey(e => e.ReportId).HasName("PK__reports__779B7C5848D5751E");

            entity.ToTable("reports");

            entity.HasIndex(e => e.CreateAt, "IX_reports_create_at");

            entity.HasIndex(e => e.UserAdminId, "IX_reports_user_admin_id");

            entity.HasIndex(e => e.UserDriverId, "IX_reports_user_driver_id");

            entity.HasIndex(e => e.UserStaffId, "IX_reports_user_staff_id");

            entity.Property(e => e.ReportId).HasColumnName("report_id");
            entity.Property(e => e.CreateAt)
                .HasColumnType("datetime")
                .HasColumnName("create_at");
            entity.Property(e => e.Note)
                .HasColumnType("text")
                .HasColumnName("note");
            entity.Property(e => e.ProcessesAt)
                .HasColumnType("datetime")
                .HasColumnName("processes_at");
            entity.Property(e => e.ReportType)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("report_type");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.UserAdminId)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("user_admin_id");
            entity.Property(e => e.UserDriverId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("user_driver_id");
            entity.Property(e => e.UserStaffId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("user_staff_id");

            entity.HasOne(d => d.UserAdmin).WithMany(p => p.ReportUserAdmins)
                .HasForeignKey(d => d.UserAdminId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_reports_user_admin_id");

            entity.HasOne(d => d.UserDriver).WithMany(p => p.ReportUserDrivers)
                .HasForeignKey(d => d.UserDriverId)
                .HasConstraintName("FK_reports_user_driver_id");

            entity.HasOne(d => d.UserStaff).WithMany(p => p.ReportUserStaffs)
                .HasForeignKey(d => d.UserStaffId)
                .HasConstraintName("FK_reports_user_staff_id");
        });

        modelBuilder.Entity<StationStaff>(entity =>
        {
            entity.HasKey(e => e.StationStaffId).HasName("PK__station___0D35F867EE8D845B");

            entity.ToTable("station_staffs");

            entity.HasIndex(e => e.BatterySwapStationId, "IX_station_staffs_battery_swap_station_id");

            entity.HasIndex(e => e.UserStaffId, "IX_station_staffs_user_staff_id");

            entity.Property(e => e.StationStaffId).HasColumnName("station_staff_id");
            entity.Property(e => e.BatterySwapStationId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("battery_swap_station_id");
            entity.Property(e => e.ShiftEnd).HasColumnName("shift_end");
            entity.Property(e => e.ShiftStart).HasColumnName("shift_start");
            entity.Property(e => e.UserStaffId)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("user_staff_id");

            entity.HasOne(d => d.BatterySwapStation).WithMany(p => p.StationStaffs)
                .HasForeignKey(d => d.BatterySwapStationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_station_staffs_battery_swap_station_id");

            entity.HasOne(d => d.UserStaff).WithMany(p => p.StationStaffs)
                .HasForeignKey(d => d.UserStaffId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_station_staffs_user_staff_id");
        });

        modelBuilder.Entity<Subscription>(entity =>
        {
            entity.HasKey(e => e.SubscriptionId).HasName("PK__subscrip__863A7EC15772A142");

            entity.ToTable("subscriptions");

            entity.HasIndex(e => new { e.StartDate, e.EndDate }, "IX_subscriptions_dates");

            entity.HasIndex(e => e.PlanId, "IX_subscriptions_plan_id");

            entity.HasIndex(e => e.UserDriverId, "IX_subscriptions_user_driver_id");

            entity.Property(e => e.SubscriptionId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("subscription_id");
            entity.Property(e => e.CreateAt)
                .HasColumnType("datetime")
                .HasColumnName("create_at");
            entity.Property(e => e.CurrentMileage)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("current_mileage");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.PlanId)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("plan_id");
            entity.Property(e => e.RemainingSwap).HasColumnName("remaining_swap");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.UserDriverId)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("user_driver_id");

            entity.HasOne(d => d.Plan).WithMany(p => p.Subscriptions)
                .HasForeignKey(d => d.PlanId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_subscriptions_plan_id");

            entity.HasOne(d => d.UserDriver).WithMany(p => p.Subscriptions)
                .HasForeignKey(d => d.UserDriverId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_subscriptions_user_driver_id");
        });

        modelBuilder.Entity<Transaction>(entity =>
        {
            entity.HasKey(e => e.TransactionId).HasName("PK__transact__85C600AF5A25FEB1");

            entity.ToTable("transactions");

            entity.HasIndex(e => e.SubscriptionId, "IX_transactions_subscription_id");

            entity.HasIndex(e => e.TransactionDate, "IX_transactions_transaction_date");

            entity.HasIndex(e => e.UserDriverId, "IX_transactions_user_driver_id");

            entity.Property(e => e.TransactionId)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("transaction_id");
            entity.Property(e => e.Amount)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("amount");
            entity.Property(e => e.Currency)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Fee)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("fee");
            entity.Property(e => e.Note)
                .HasColumnType("text")
                .HasColumnName("note");
            entity.Property(e => e.PaymentMethod)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("payment_method");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubscriptionId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("subscription_id");
            entity.Property(e => e.TotalAmount)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("total_amount");
            entity.Property(e => e.TransactionDate)
                .HasColumnType("datetime")
                .HasColumnName("transaction_date");
            entity.Property(e => e.TransactionType)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("transaction_type");
            entity.Property(e => e.UserDriverId)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("user_driver_id");

            entity.HasOne(d => d.Subscription).WithMany(p => p.Transactions)
                .HasForeignKey(d => d.SubscriptionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_transactions_subscription_id");

            entity.HasOne(d => d.UserDriver).WithMany(p => p.Transactions)
                .HasForeignKey(d => d.UserDriverId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_transactions_user_driver_id");
        });

        modelBuilder.Entity<TransferLog>(entity =>
        {
            entity.HasKey(e => e.TransferId).HasName("PK__transfer__78E6FD33F1276700");

            entity.ToTable("transfer_logs");

            entity.HasIndex(e => e.BatteryId, "IX_transfer_logs_battery_id");

            entity.HasIndex(e => e.CreatedAt, "IX_transfer_logs_created_at");

            entity.HasIndex(e => e.NewLocationId, "IX_transfer_logs_new_location_id");

            entity.HasIndex(e => e.OldLocationId, "IX_transfer_logs_old_location_id");

            entity.HasIndex(e => e.UserAdminId, "IX_transfer_logs_user_admin_id");

            entity.Property(e => e.TransferId).HasColumnName("transfer_id");
            entity.Property(e => e.BatteryId)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("battery_id");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.NewLocationId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("new_location_id");
            entity.Property(e => e.OldLocationId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("old_location_id");
            entity.Property(e => e.Reason)
                .HasColumnType("text")
                .HasColumnName("reason");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.UserAdminId)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("user_admin_id");

            entity.HasOne(d => d.Battery).WithMany(p => p.TransferLogs)
                .HasForeignKey(d => d.BatteryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_transfer_logs_battery_id");

            entity.HasOne(d => d.NewLocation).WithMany(p => p.TransferLogNewLocations)
                .HasForeignKey(d => d.NewLocationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_transfer_logs_new_location_id");

            entity.HasOne(d => d.OldLocation).WithMany(p => p.TransferLogOldLocations)
                .HasForeignKey(d => d.OldLocationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_transfer_logs_old_location_id");

            entity.HasOne(d => d.UserAdmin).WithMany(p => p.TransferLogs)
                .HasForeignKey(d => d.UserAdminId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_transfer_logs_user_admin_id");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__users__B9BE370FBD07376C");

            entity.ToTable("users");

            entity.HasIndex(e => e.SupervisorId, "IX_users_supervisor_id");

            entity.HasIndex(e => e.UserEmail, "IX_users_user_email");

            entity.Property(e => e.UserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("user_id");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.SupervisorId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("supervisor_id");
            entity.Property(e => e.UserAddress)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("user_address");
            entity.Property(e => e.UserDriverName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("user_driver_name");
            entity.Property(e => e.UserEmail)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("user_email");
            entity.Property(e => e.UserPasswordHash)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("user_password_hash");
            entity.Property(e => e.UserRole)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("user_role");
            entity.Property(e => e.UserTele)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("user_tele");

            entity.HasOne(d => d.Supervisor).WithMany(p => p.InverseSupervisor)
                .HasForeignKey(d => d.SupervisorId)
                .HasConstraintName("FK_users_supervisor_id");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}